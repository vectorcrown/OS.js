#!/usr/bin/env php
<?php
define('__CLI_SCRIPT', true);
require 'backend/api.php';
$yui_path = "/opt/yuicompressor-2.4.8.jar";

$header = <<<EOPHP

/*!
 * OS.js - JavaScript Operating System
 *
 * Copyright (c) 2011-2013, Anders Evenrud <andersevenrud@gmail.com>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer. 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author  Anders Evenrud <andersevenrud@gmail.com>
 * @licence Simplified BSD License
 */

EOPHP;

function yui($type, $path, $dest) {
  global $yui_path;
  $cmd = "java -jar $yui_path --type $type --charset=utf-8 $path -o $dest";
  return shell_exec($cmd);
}

function minimize($data) {
  $minimized = preg_replace('/(?:(?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/)|(?:(?<!\:|\\\)\/\/.*))/', "", $data);
  return $minimized;
}

function minimize_js($data) {
  global $header;
  $minimized = minimize($data);
  //$minimized = preg_replace("/console\.(log|info|warn|debug|group|groupEnd)\((.*)\);?/", "", $minimized);
  $minimized = preg_replace("/console\.(log|info|warn|debug|group|groupEnd)\(([^;]*)\);?/", "", $minimized);

  return "{$header}{$minimized}";
}

function minimize_css($data) {
  global $header;
  $minimized = minimize($data);
  $minimized = preg_replace("/^\@charset(.*)/", "", $minimized);

  return "@charset \"UTF-8\";\n{$header}{$minimized}";
}

function concat_files(Array $files) {
  $data = Array();
  foreach ( $files as $f ) {
    print "- Using '{$f}'\n";
    if ( $src = file_get_contents($f) ) {
      $data[] = $src;
    }
  }
  return implode("\n", $data);
}

$css_tmp    = "frontend/_all.tmp.css";
$css_output = "frontend/_all.css";
$css_files  = Array(
  "frontend/core.css",
  "frontend/dialogs.css",
  "frontend/gui.css",
  "frontend/main.css"
);

$js_tmp    = "frontend/_all.tmp.js";
$js_output = "frontend/_all.js";
$js_files  = Array(
  "frontend/core.js",
  "frontend/dialogs.js",
  "frontend/gui.js",
  "frontend/handler.js",
  "frontend/helpers.js",
  "frontend/locales.js",
  "frontend/main.js",
  "frontend/utils.js"
);

$handler = 'demo';
if ( defined("HANDLER") && HANDLER ) {
  $handler = HANDLER;
}
if ( $handler ) {
  $js_files[] = sprintf("frontend/handlers/%s.js", $handler);
}

if ( !$yui_path || !file_exists($yui_path) ) {
  die("YUI was not found!\n");
}

// JS
print sprintf("Minimizing %d JavaScript files...\n", count($js_files));
$js_data = concat_files($js_files);
if ( !($js = minimize_js($js_data)) ) {
  $js = '';
}
file_put_contents($js_tmp, $js);
yui('js', $js_tmp, $js_output);
$js_new_size = filesize($js_output);
$js_orig_size = strlen($js_data);
$js_compression = ($js_new_size / $js_orig_size) * 100;
print sprintf("Compressed size: %db, Original: %db (%d%%)\n", $js_new_size, $js_orig_size, $js_compression);

print "\n";

// CSS
print sprintf("Minimizing %d CSS files...\n", count($css_files));
$css_data = concat_files($css_files);
if ( !($css = minimize_css($css_data)) ) {
  $css = '';
}
file_put_contents($css_tmp, $css);
yui('css', $css_tmp, $css_output);
$css_new_size = filesize($css_output);
$css_orig_size = strlen($css_data);
$css_compression = ($css_new_size / $css_orig_size) * 100;
print sprintf("Compressed size: %db, Original: %db (%d%%)\n", $css_new_size, $css_orig_size, $css_compression);

// Cleanup
@unlink($css_tmp);
@unlink($js_tmp);
?>
