#!/usr/bin/env node

var PACKAGES_DIR  = "src/packages";
var REPO_FILE     = "src/packages/repositories.json";
var OUT_MANIFEST  = "dist/packages.json";

var _fs   = require('fs'),
    _path = require('path');

function get_metadata(path, file, repo) {
  var json_path = _path.join(path, "package.json");
  try {
    var json_data = JSON.parse(_fs.readFileSync(json_path));
    var manifest = null;
    var package_name;
    for ( var name in json_data ) {
      if ( json_data.hasOwnProperty(name) ) {
        package_name = name;
        manifest     = json_data[name];
        break;
      }
    }

    if ( manifest !== null ) {
      if ( manifest['enabled'] === false || manifest['enabled'] === 'false' ) {
        console.log("\033[0;31mSkipped '%s' (disabled)\033[0m", package_name);
        return null;
      }
    }

    if ( typeof manifest.preload !== 'undefined' && (manifest.preload instanceof Array)) {
      for ( var p = 0; p < manifest.preload.length; p++ ) {
        if ( !manifest.preload[p].src.match(/^(ftp|https?\:)?\/\//) ) {
          manifest.preload[p].src = (["/packages", repo, file, manifest.preload[p].src]).join("/");
        }
      }
    }

    manifest.path = repo + "/" + file;
    manifest.iter = package_name;

    //console.log("\033[1;37mAdded package '%s'\033[0m", package_name);
    console.log("Added package '%s'", package_name);

    return manifest;
  } catch ( e ) {
    console.log("  \033[0;31mSkipped '%s' (parse error)\033[0m", file);
    console.error(e);
  }
  return null;
}

function scan_packages(repo, /* byref */packages) {
  var files = _fs.readdirSync(_path.join(PACKAGES_DIR, repo));

  var file, path, metadata;
  for ( var f = 0; f < files.length; f++ ) {
    file = files[f];
    if ( !file.length || file.match(/^\./) ) continue;

    path = _path.join(PACKAGES_DIR, repo, file);
    if ( _fs.statSync(path).isDirectory() ) {
      metadata = get_metadata(path, file, repo);
      if ( metadata !== null ) {
        packages[metadata.iter] = metadata;
      }
    }
  }
}

var combined = {};
var repos = JSON.parse(_fs.readFileSync(REPO_FILE));
var repo;

for ( var i = 0; i < repos.length; i++ ) {
  repo = repos[i];
  console.log("\033[1;34mScanning repository '%s':\033[0m", repo);
  scan_packages(repo, combined);
}

_fs.writeFileSync(OUT_MANIFEST, JSON.stringify(combined));
