#!/usr/bin/env php
<?php
define('__CLI_SCRIPT', true);
$is_cli = php_sapi_name();

if ( !isset($argv) ) $argv = Array();
$restrict = Array();
for ( $i = 1; $i < sizeof($argv); $i++ ) {
  $restrict[] = $argv[$i];
}

if ( $is_cli == "cli" ) {
  require 'src/server-php/api.php';
} else {
  require '../src/server-php/api.php';
}

$combined = Array();
$dirs = explode(":", APPDIR);
foreach ( $dirs as $path ) {
  if ( $path{0} == '.' ) continue;
  $basedir = basename($path);

  if ( sizeof($restrict) && !in_array(basename($path), $restrict) ) {
    continue;
  }

  print sprintf("\033[1;34mScanning repository '%s':\033[0m\n", basename($path));
  foreach ( scandir($path) as $i ) {
    $b = "{$path}/{$i}";
    if ( $i{0} == '.' ) continue;
    if ( !is_dir($b) ) continue;
    $file = "{$b}/package.json";
    if ( file_exists($file) && ($c = file_get_contents($file)) ) {
      if ( $j = json_decode($c, true) ) {
        $k = key($j);
        $data = current($j);

        if ( isset($data['enabled']) && ($data['enabled'] === false || $data['enabled'] === 'false' ) ) {
          print "- Skipping {$i} (disabled)\n";
          continue;
        }

        foreach ( $data['preload'] as $pi => $pp ) {
          if ( !preg_match("/^(ftp|https?\:)?\/\//", $pp['src']) ) {
            $data['preload'][$pi]['src'] = "/packages/{$basedir}/{$i}/{$pp['src']}";
          }
        }

        print "  \033[1;37mAdded package '$i'\033[0m\n";

        $data['path']    = "{$basedir}/{$i}";
        $data['iter']    = $i;
        $combined[$k]    = $data;
      } else {
        print "  \033[1;31mSkipped {$i} (parse error):\033[0m\n";
        switch (json_last_error()) {
          case JSON_ERROR_NONE:
            echo '  No errors';
            break;
          case JSON_ERROR_DEPTH:
            echo '  Maximum stack depth exceeded';
            break;
          case JSON_ERROR_STATE_MISMATCH:
            echo '  Underflow or the modes mismatch';
            break;
          case JSON_ERROR_CTRL_CHAR:
            echo '  Unexpected control character found';
            break;
          case JSON_ERROR_SYNTAX:
            echo '  Syntax error, malformed JSON';
            break;
          case JSON_ERROR_UTF8:
            echo '  Malformed UTF-8 characters, possibly incorrectly encoded';
            break;
          default:
            echo '  Unknown error';
            break;
        }
        print "\n";
      }
    } else {
      print "  \033[1;37mSkipped {$i} (no manifest)\033[0m\n";
    }
  }
}

ksort($combined);

if ( $size = file_put_contents(ROOTDIR . "/dist/packages.json", json_encode($combined)) ) {
  $count = sizeof($combined);
  print "\033[0;36mWrote package manifest: {$size}b ($count apps)\033[0m\n";
  exit(0);
}

print "\033[1;31mFAILED CREATING MANIFEST\033[0m\n";
exit(1);

?>
