#!/usr/bin/env node

var _fs = require('fs'),
    _path = require('path');

var header_js = ([
//'"use strict";',
'/*jshint maxerr: 10000 */',
'var OSjs;',
'',
'/*!',
' * OS.js - JavaScript Operating System',
' *',
' * Copyright (c) 2011-2013, Anders Evenrud <andersevenrud@gmail.com>',
' * All rights reserved.',
' * ',
' * Redistribution and use in source and binary forms, with or without',
' * modification, are permitted provided that the following conditions are met: ',
' * ',
' * 1. Redistributions of source code must retain the above copyright notice, this',
' *    list of conditions and the following disclaimer. ',
' * 2. Redistributions in binary form must reproduce the above copyright notice,',
' *    this list of conditions and the following disclaimer in the documentation',
' *    and/or other materials provided with the distribution. ',
' * ',
' * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND',
' * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED',
' * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE',
' * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR',
' * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES',
' * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;',
' * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND',
' * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT',
' * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS',
' * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.',
' *',
' * @author  Anders Evenrud <andersevenrud@gmail.com>',
' * @licence Simplified BSD License',
' */'
]).join("\n");

var header_css = ([
'@charset "UTF-8";',
'/*!',
' * OS.js - JavaScript Operating System',
' *',
' * Copyright (c) 2011-2013, Anders Evenrud <andersevenrud@gmail.com>',
' * All rights reserved.',
' * ',
' * Redistribution and use in source and binary forms, with or without',
' * modification, are permitted provided that the following conditions are met: ',
' * ',
' * 1. Redistributions of source code must retain the above copyright notice, this',
' *    list of conditions and the following disclaimer. ',
' * 2. Redistributions in binary form must reproduce the above copyright notice,',
' *    this list of conditions and the following disclaimer in the documentation',
' *    and/or other materials provided with the distribution. ',
' * ',
' * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND',
' * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED',
' * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE',
' * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR',
' * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES',
' * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;',
' * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND',
' * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT',
' * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS',
' * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.',
' *',
' * @author  Anders Evenrud <andersevenrud@gmail.com>',
' * @licence Simplified BSD License',
' */'
]).join("\n");

function get_list_contents(list, handler, type) {
  var data = [];
  var iter, src;
  for ( var i = 0; i < list.length; i++ ) {
    iter = list[i].replace("%HANDLER%", handler);
    console.log(iter);

    src = _fs.readFileSync(iter);
    if ( src !== null ) {
      src = src.toString().replace(/\/\*\![\s\S]*?\*\//, "");
//      src = src.toString().replace('"use strict";', "");
      src = src.toString().replace('@charset "UTF-8";', "");

      data.push(src);
    }
  }

  var out = data.join("\n");
  console.log("\033[1;37m... %d files / %d bytes\033[0m", data.length, out.length);
  return (type == "css" ? header_css : header_js) + out;
}

var buildData = JSON.parse(_fs.readFileSync("src/build.json"));
if ( buildData !== null ) {
  var handler = buildData.handler || "demo";
  console.log("\033[1;34mCompiling JavaScript\033[0m");
  var js = get_list_contents(buildData.javascript.files, handler, "js");
  _fs.writeFileSync(buildData.javascript.output, js);

  console.log("\033[1;34mCompiling CSS\033[0m");
  _fs.writeFileSync(buildData.stylesheets.output, get_list_contents(buildData.stylesheets.files, handler, "css"));
}
