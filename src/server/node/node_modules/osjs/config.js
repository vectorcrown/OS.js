/*!
 * OS.js - JavaScript Cloud/Web Desktop Platform
 *
 * Copyright (c) 2011-2016, Anders Evenrud <andersevenrud@gmail.com>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer. 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author  Anders Evenrud <andersevenrud@gmail.com>
 * @licence Simplified BSD License
 */
(function(_path, _fs) {
  var ISWIN = /^win/.test(process.platform);

  function getConfig(root, dist, nw) {
    var config  = {
      port:       8000,
      directory:  null, // Automatic
      tmpdir:     '/tmp',
      handler:    'demo',
      vfs:        {
        'homes':   _path.join(root, 'vfs/home'),
        'tmp':     _path.join(root, 'vfs/tmp'),
        'public':  _path.join(root, 'vfs/public')
      },
      repodir:    nw ? _path.join(root, 'packages') : _path.join(root, 'src/packages'),
      distdir:    dist ? _path.join(root, dist) : root,
      rootdir:    root,
      iswin:      ISWIN,
      isnw:       !!nw,
      mimes:      {}
    };

    if ( !config.directory ) {
      config.directory = _fs.realpathSync('.');
    }

    return config;
  }

  function readConfig(root, path) {
    if ( _fs.existsSync(path) ) {
      try {
        var str = _fs.readFileSync(path).toString();
        var droot = root.replace(/\/$/, '');

        if ( ISWIN ) {
          str = str.replace(/%DROOT%/g,       droot.replace(/(["\s'$`\\])/g,'\\$1'));
        } else {
          str = str.replace(/%DROOT%/g,       droot);
        }

        return JSON.parse(str);
      } catch ( e ) {
        console.warn('!!!', 'Failed to parse configuration', path, e);
      }
    } else {
      console.warn('!!!', 'Did not find configuration', path);
    }
    return false;
  }

  module.exports = {
    init: function(root, dist, nw, exedir) {
      var config = getConfig(root, dist, nw);

      if ( !nw ) {
        var settFile = _path.join(_path.dirname(exedir), "settings.json");
        var settConfig = readConfig(root, settFile);
        if ( settConfig !== false ) {
          for ( var i in settConfig ) {
            if ( settConfig.hasOwnProperty(i) && config.hasOwnProperty(i) ) {
              config[i] = settConfig[i];
            }
          }
        }
      }

      var tries = [
        _path.join(root, "mime.json"), // NW
        _path.join(_path.dirname(exedir), "mime.json"), // X11
        _path.join(root, "src/conf/130-mime.json") // Default
      ];

      tries.forEach(function(p) {
        if ( _fs.existsSync(p) ) {
          var tmpConfig = readConfig(root, p);
          config.mimes = tmpConfig.mime.mapping;
          return false;
        }
        return true;
      });

      return config;
    }
  };
})(
  require("path"),
  require("node-fs-extra")
);
