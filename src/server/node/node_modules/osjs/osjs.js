/*!
 * OS.js - JavaScript Cloud/Web Desktop Platform
 *
 * Copyright (c) 2011-2016, Anders Evenrud <andersevenrud@gmail.com>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer. 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author  Anders Evenrud <andersevenrud@gmail.com>
 * @licence Simplified BSD License
 */
(function(_path) {

  var api = require('./api.js');
  var vfs = require('./vfs.js');

  /////////////////////////////////////////////////////////////////////////////
  // GLOBALS
  /////////////////////////////////////////////////////////////////////////////

  var namespace = {};
  var config = {};
  var handler = {
    register: function(CONFIG, API, HANDLER) {
      API.login = function(data) {
        return data;
      };
      API.logout = function() {
        return true;
      };
    },
    checkPrivilege: function() {
      return true;
    }
  };

  /////////////////////////////////////////////////////////////////////////////
  // METHODS
  /////////////////////////////////////////////////////////////////////////////

  /**
   * API Request proxy
   */
  function request(method, args, callback, request, response) {
    response = response || {
      statusCode: 200
    };

    request = request || {
      cookies: {
        get: function(k) {
          if ( k === 'username' ) {
            return 'demo';
          } else if ( k === 'groups' ) {
            return ['admin'];
          }
          return null;
        },
        set: function() {
        }
      }
    };

    if ( namespace[method] ) {
      namespace[method](args, callback, request, response, config);
    } else {
      throw "Invalid method: " + method;
    }
  }

  /**
   * Initializes
   */
  function init(root, dist, nw, logging, exedir) {
    config = require('./config.js').init(root, dist, nw, exedir);
    config.logging = typeof logging === 'undefined' ? true : (logging === true);

    // Register internal API methods
    var privilegeMap = {
      application: 'application',
      curl: 'curl',
      fs: 'vfs'
    };

    Object.keys(api).forEach(function(fn) {
      namespace[fn] = function(args, callback, request, response) {
        if ( privilegeMap[fn] ) {
          handler.checkPrivilege(request, response, privilegeMap[fn]);
        }
        api[fn].apply(api[fn], arguments);
      };
    });

    // Register handler API methods
    if ( !nw ) {
      var hs = _path.join(exedir, 'handlers', config.handler , 'handler.js')
      var ihs = require(hs);
      if ( ihs.checkPrivilege ) {
        handler.checkPrivilege = ihs.checkPrivilege;
      }
      ihs.register(config, namespace, handler);
    }

    if ( !handler.checkPrivilege ) {
      handler.checkPrivilege = function(request, response, privilege) {
        if ( nw ) {
          return true;
        }

        if ( typeof privilege !== 'boolean' ) {
          if ( !privilege ) privilege = [];
          if ( !(privilege instanceof Array) && privilege ) privilege = [privilege];
        }

        function check() {
          var groups = [];
          try {
            groups = JSON.parse(request.cookies.get('groups'));
          } catch ( e ) {
            groups = [];
          }

          if ( groups.indexOf('admin') < 0 ) {
            var allowed = true;
            privilege.forEach(function(p) {
              if ( groups.indexOf(p) < 0 ) {
                allowed = false;
              }
              return allowed;
            });
            return allowed;
          }

          return true;
        }

        var uname = request.cookies.get('username');
        if ( !uname ) {
          throw 'You have no OS.js Session, please log in!';
        }
        if ( privilege.length && !check() ) {
          throw 'You are not allowed to use this API function!';
        }

        return true;
      };
    }

    // Register package extension API methods
    if ( config.extensions ) {
      var exts = config.extensions;
      exts.forEach(function(f) {
        if ( f.match(/\.js$/) ) {
          require(config.rootdir + f).register(config, namespace, handler);
        }
      });
    }

    return {
      api: namespace,
      vfs: vfs,
      request: request,
      handler: handler,
      config: config
    };
  }

  /////////////////////////////////////////////////////////////////////////////
  // EXPORTS
  /////////////////////////////////////////////////////////////////////////////

  module.exports = {
    init: init
  };
})(require("path"));
