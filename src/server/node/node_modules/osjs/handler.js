/*!
 * OS.js - JavaScript Cloud/Web Desktop Platform
 *
 * Copyright (c) 2011-2016, Anders Evenrud <andersevenrud@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author  Anders Evenrud <andersevenrud@gmail.com>
 * @licence Simplified BSD License
 */
(function(_path) {
  'use strict';

  /////////////////////////////////////////////////////////////////////////////
  // DEFAULT HANDLER
  /////////////////////////////////////////////////////////////////////////////

  /**
   * Server Handler Instance
   *
   * This is what is responsible for all API and VFS communication and user
   * session(s).
   *
   * @param   Object      instance      Current server instance
   * @param   Object      applyAPI      Apply these API methods
   * @param   Object      applyVFS      Apply these VFS methods
   *
   * @api handler.Handler
   * @class
   */
  function DefaultHandler(instance, applyAPI, applyVFS) {
    Object.keys(applyAPI || {}).forEach(function(key) {
      instance.api[key] = applyAPI[key];
    });

    Object.keys(applyVFS || {}).forEach(function(key) {
      instance.vfs[key] = applyVFS[key];
    });

    this.instance = instance;
  }

  /**
   * Gets the username of currently active user
   *
   * @param   Object      request       Server request object
   * @param   Object      response      Server response object
   *
   * @method Handler::getUserName()
   */
  DefaultHandler.prototype.getUserName = function(request, response) {
    return request.cookies.get('username');
  };

  /**
   * Gets the groups of currently active user
   *
   * @param   Object      request       Server request object
   * @param   Object      response      Server response object
   *
   * @method Handler::getUserGroups()
   */
  DefaultHandler.prototype.getUserGroups = function(request, response) {
    var groups = [];
    try {
      groups = JSON.parse(request.cookies.get('groups'));
    } catch ( e ) {
      groups = [];
    }
    return groups;
  };

  DefaultHandler.prototype.setUserData = function(request, response, data, callback) {
    if ( data === null ) {
      request.cookies.set('username', null, {httpOnly:true});
      request.cookies.set('groups', null, {httpOnly:true});
    } else {
      request.cookies.set('username', data.username, {httpOnly:true});
      request.cookies.set('groups', JSON.stringify(data.groups), {httpOnly:true});
    }

    callback(false, true);
  };

  /**
   * Check if active user has given API privilege
   *
   * @see Handler::checkAPIPrivilege()
   * @method Handler::hasAPIPrivilege()
   */
  DefaultHandler.prototype.hasAPIPrivilege = function(request, response, privilege, callback) {
    var map = this.instance.config.api.groups;
    if ( map && privilege && map[privilege] ) {
      if ( !this._checkIfHasGroup(request, response, privilege) ) {
        callback('You are not allowed to use this API function!');
        return;
      }
    }

    callback(false, true);
  };

  /**
   * Check if active user has given VFS privilege
   *
   * This method only checks for the 'mount' location. You can
   * override this to make it check for given method name as well
   *
   * @see Handler::checkVFSPrivilege()
   * @method Handler::hasVFSPrivilege()
   */
  DefaultHandler.prototype.hasVFSPrivilege = function(request, response, method, args, callback) {
    var mount = this.instance.vfs.getRealPath(args.path || args.src, this.instance.config, request);
    var cfg = this.instance.config.vfs.groups;
    var against;

    try {
      against = cfg[mount.protocol.replace(/\:\/\/$/, '')];
    } catch ( e ) {}

    if ( against ) {
      if ( !this._checkIfHasGroup(request, response, against) ) {
        callback('You are not allowed to use this VFS function!');
        return;
      }
    }

    callback(false, true);
  };

  /**
   * Check if request has access to given API request
   *
   * @param   Object      request       Server request object
   * @param   Object      response      Server response object
   * @param   Mixed       privilege     Check against given privilege(s)
   * @param   Function    callback      Callback function => fn(err, result)
   *
   * @return  boolean                   Return true for normal, false for custom callback
   *
   * @method Handler::checkAPIPrivilege()
   */
  DefaultHandler.prototype.checkAPIPrivilege = function(request, response, privilege, callback) {
    var self = this;
    this._checkDefaultPrivilege(request, response, function(err) {
      if ( err ) {
        callback(err);
        return;
      }
      self.hasAPIPrivilege(request, response, privilege, callback);
    });
  };

  /**
   * Check if request has access to given VFS request
   *
   * @param   Object      request       Server request object
   * @param   Object      response      Server response object
   * @param   String      method        VFS Method name
   * @param   Object      args          VFS Method arguments
   * @param   Function    callback      Callback function => fn(err, result)
   *
   * @return  boolean                   Return true for normal, false for custom callback
   *
   * @method Handler::checkVFSPrivilege()
   */
  DefaultHandler.prototype.checkVFSPrivilege = function(request, response, method, args, callback) {
    var self = this;
    this._checkDefaultPrivilege(request, response, function(err) {
      if ( err ) {
        callback(err);
        return;
      }
      self.hasVFSPrivilege(request, response, method, args, callback);
    });
  };

  /**
   * Event fired when server starts
   *
   * @method Handler::onServerStart()
   */
  DefaultHandler.prototype.onServerStart = function() {
  };

  /**
   * Event fired when server ends
   *
   * @method Handler::onServerEnd()
   */
  DefaultHandler.prototype.onServerEnd = function() {
  };

  /**
   * Default method for checking if User has given group(s)
   *
   * If the user has group 'admin' it will automatically granted full access
   *
   * @param   Object      request       Server request object
   * @param   Object      response      Server response object
   * @param   String      groupname     Group name(s) (can also be an array)
   *
   * @return  boolean
   *
   * @method Handler::_checkIfHasGroup()
   */
  DefaultHandler.prototype._checkIfHasGroup = function(request, response, groupnames) {
    groupnames = groupnames || [];
    if ( !(groupnames instanceof Array) && groupnames ) {
      groupnames = [groupnames];
    }

    if ( typeof groupnames !== 'boolean' ) {
      var groups = this.getUserGroups(request, response);
      if ( groups.indexOf('admin') < 0 ) {
        var allowed = true;
        groupnames.forEach(function(p) {
          if ( groups.indexOf(p) < 0 ) {
            allowed = false;
          }
          return allowed;
        });
        return allowed;
      }
    }

    return true;
  };

  /**
   * Default method for checking API privileges
   *
   * It just checks it the user has a session
   *
   * @param   Object      request       Server request object
   * @param   Object      response      Server response object
   * @param   Function    callback      Callback function => fn(err, result)
   *
   * @method Handler::_checkDefaultPrivilege()
   */
  DefaultHandler.prototype._checkDefaultPrivilege = function(request, response, callback) {
    if ( !this.instance.setup.nw && !this.getUserName(request, response) ) {
      callback('You have no OS.js Session, please log in!');
      return;
    }
    callback(false, true);
  };

  /////////////////////////////////////////////////////////////////////////////
  // NW HANDLER
  /////////////////////////////////////////////////////////////////////////////

  /**
   * @api handler.NWHandler
   * @see handler.Handler
   * @class
   */
  function NWHandler(instance) {
    DefaultHandler.call(this, instance, {
      login: function(data) {
        return data;
      },
      logout: function() {
        return true;
      }
    });
  }

  NWHandler.prototype = Object.create(DefaultHandler.prototype);
  NWHandler.constructor = DefaultHandler;

  /////////////////////////////////////////////////////////////////////////////
  // EXPORTS
  /////////////////////////////////////////////////////////////////////////////

  /**
   * Initializes the handler
   *
   * @param   Object      instance      Current server instance
   *
   * @return  Handler
   *
   * @see osjs.js
   * @api handler.init()
   */
  module.exports.init = function(instance) {

    // Register 'handler' API methods
    var handler;
    var hs = _path.join(instance.setup.dirname, 'handlers', instance.config.handler, 'handler.js');
    if ( instance.setup.nw ) {
      handler = new NWHandler();
    } else {
      handler = require(hs).register(instance, DefaultHandler);
    }

    // Wrap privilege checks for VFS
    var vfs = require('./vfs.js');
    Object.keys(vfs).forEach(function(fn) {
      if ( (['getMime', 'getRealPath']).indexOf(fn) < 0 ) {
        instance.vfs[fn] = function(args, callback, request, response) {
          handler.checkAPIPrivilege(request, response, 'fs', function(err) {
            if ( err ) {
              callback(err);
              return;
            }
            handler.checkVFSPrivilege(request, response, fn, args, function(err) {
              if ( err ) {
                callback(err);
                return;
              }
              return vfs[fn].apply(vfs[fn], [args, request, callback, instance.config, handler]);
            });
          });
        };
      } else {
        instance.vfs[fn] = vfs[fn];
      }
    });

    // Wrap privilege checks for API
    var api = require('./api.js');
    Object.keys(api).forEach(function(fn) {
      if ( !instance.api[fn] ) {
        instance.api[fn] = function(args, callback, request, response, config) {
          handler.checkAPIPrivilege(request, response, fn, function(err) {
            if ( err ) {
              callback(err);
              return;
            }
            api[fn].apply(api[fn], [args, callback, request, response, config, handler]);
          });
        };
      }
    });

    return handler;
  };
})(require('path'));
