/*!
 * OS.js - JavaScript Cloud/Web Desktop Platform
 *
 * Copyright (c) 2011-2016, Anders Evenrud <andersevenrud@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author  Anders Evenrud <andersevenrud@gmail.com>
 * @licence Simplified BSD License
 */
(function(_path, _fs) {
  'use strict';

  function readExif(data, cb) {
    cb(data); // TODO
  }

  function readPermission(mode) {
    return mode; // TODO
  }

  function pathJoin() {
    var s = _path.join.apply(null, arguments);
    return s.replace(/\\/g, '/');
  }

  function getRealPath(path, config, request) {
    var fullPath = null;
    var protocol = '';

    if ( path.match(/^osjs\:\/\//) ) {
      path = path.replace(/^osjs\:\/\//, '');
      fullPath = _path.join(config.distdir, path);
      protocol = 'osjs://';
    } else if ( path.match(/^home\:\/\//) ) {
      path = path.replace(/^home\:\/\//, '');
      var userdir = request.cookies.get('username');
      if ( !userdir ) {
        throw 'No user session was found';
      }
      fullPath = _path.join(config.vfs.homes, userdir, path);
      protocol = 'home://';
    } else {
      var tmp = path.split(/^(\w+)\:\/\//);
      if ( tmp.length === 3 ) {
        tmp = tmp[1];
        if ( config.vfs.mounts && config.vfs.mounts[tmp] ) {
          protocol = tmp + '://';
          path = path.replace(/^(\w+)\:\/\//, '');
          fullPath = _path.join(config.vfs.mounts[tmp], path);
        }
      }
    }

    if ( !fullPath ) {
      throw new Error('Invalid mountpoint');
    }

    return {root: fullPath, path: path, protocol: protocol};
  }

  function getMime(file, config) {
    var i = file.lastIndexOf('.'),
        ext = (i === -1) ? 'default' : file.substr(i),
        mimeTypes = config.mimes;
    return mimeTypes[ext.toLowerCase()] || mimeTypes.default;
  }

  /////////////////////////////////////////////////////////////////////////////
  // EXPORTS
  /////////////////////////////////////////////////////////////////////////////

  /**
   * Get real filesystem path
   *
   * NOT AVAILABLE FROM CLIENT
   *
   * @param   String    file        File path
   * @param   Object    config      Server configuration object
   * @param   Object    request     Server request object
   *
   * @return  Object                With `root` (real path), `path` (virtual path), `protocol` (virtual protocol)
   *
   * @api     vfs.getRealPath
   */
  module.exports.getRealPath = getRealPath;

  /**
   * Get file MIME
   *
   * NOT AVAILABLE FROM CLIENT
   *
   * @param   String    file        File path
   * @param   Object    config      Server configuration object
   *
   * @return  String
   *
   * @api     vfs.getMime
   */
  module.exports.getMime = getMime;

  /**
   * Read a file
   *
   * @param   Object    args        API Call Arguments
   * @param   Function  callback    Callback function => fn(error, result)
   * @param   Object    request     Server request object
   * @param   Object    response    Server response object
   * @param   Object    config      Server configuration object
   *
   * @option  args      String    path      Request path
   * @option  args      Object    options   (Optional) Request options
   *
   * @option  opts      boolean   raw     Return raw/binary data (default=false)
   *
   * @return  void
   *
   * @api     vfs.read
   */
  module.exports.read = function(args, request, callback, config) {
    var realPath = getRealPath(args.path, config, request);
    var path = realPath.path;
    var opts = typeof args.options === 'undefined' ? {} : (args.options || {});

    _fs.exists(realPath.root, function(exists) {
      if ( exists ) {
        _fs.readFile(realPath.root, function(error, data) {
          if ( error ) {
            callback('Error reading file: ' + error);
          } else {
            if ( opts.raw ) {
              callback(false, data);
            } else {
              data = 'data:' + getMime(realPath.root, config) + ';base64,' + (new Buffer(data).toString('base64'));
              callback(false, data.toString());
            }
          }
        });
      } else {
        callback('File not found!');
      }
    });
  };

  /**
   * Write a file
   *
   * @param   Object    args        API Call Arguments
   * @param   Function  callback    Callback function => fn(error, result)
   * @param   Object    request     Server request object
   * @param   Object    response    Server response object
   * @param   Object    config      Server configuration object
   *
   * @option  args      String    path      Request path
   * @option  args      Mixed     data      Request payload
   * @option  args      Object    options   (Optional) Request options
   *
   * @option  opts      boolean   raw     Write raw/binary data (default=false)
   *
   * @return  void
   *
   * @api     vfs.write
   */
  module.exports.write = function(args, request, callback, config) {
    var data = args.data || '';
    var opts = typeof args.options === 'undefined' ? {} : (args.options || {});
    var realPath = getRealPath(args.path, config, request);
    var path = realPath.path;

    if ( opts.raw ) {
      _fs.writeFile(realPath.root, data, 'binary', function(error, data) {
        if ( error ) {
          callback('Error writing file: ' + error);
        } else {
          callback(false, true);
        }
      });
    } else {
      data = unescape(data.substring(data.indexOf(',') + 1));
      data = new Buffer(data, 'base64');

      _fs.writeFile(realPath.root, data, function(error, data) {
        if ( error ) {
          callback('Error writing file: ' + error);
        } else {
          callback(false, true);
        }
      });
    }
  };

  /**
   * Delete a file
   *
   * @param   Object    args        API Call Arguments
   * @param   Function  callback    Callback function => fn(error, result)
   * @param   Object    request     Server request object
   * @param   Object    response    Server response object
   * @param   Object    config      Server configuration object
   *
   * @option  args      String    path      Request path
   * @option  args      Object    options   (Optional) Request options
   *
   * @return  void
   *
   * @api     vfs.delete
   */
  module.exports.delete = function(args, request, callback, config) {
    var opts = typeof args.options === 'undefined' ? {} : (args.options || {});
    var realPath = getRealPath(args.path, config, request);
    var path = realPath.path;

    _fs.exists(realPath.root, function(exists) {
      if ( !exists ) {
        callback('Target does not exist!');
      } else {
        _fs.remove(realPath.root, function(error, data) {
          if ( error ) {
            callback('Error deleting: ' + error);
          } else {
            callback(false, true);
          }
        });
      }
    });
  };

  /**
   * Copy a file
   *
   * @param   Object    args        API Call Arguments
   * @param   Function  callback    Callback function => fn(error, result)
   * @param   Object    request     Server request object
   * @param   Object    response    Server response object
   * @param   Object    config      Server configuration object
   *
   * @option  args      String    src       Request source path
   * @option  args      String    dest      Request destination path
   * @option  args      Object    options   (Optional) Request options
   *
   * @return  void
   *
   * @api     vfs.copy
   */
  module.exports.copy = function(args, request, callback, config) {
    var src  = args.src;
    var dst  = args.dest;
    var opts = typeof args.options === 'undefined' ? {} : (args.options || {});

    var realSrc = getRealPath(src, config, request);
    var realDst = getRealPath(dst, config, request);
    var srcPath = realSrc.root; //_path.join(realSrc.root, src);
    var dstPath = realDst.root; //_path.join(realDst.root, dst);
    _fs.exists(srcPath, function(exists) {
      if ( exists ) {
        _fs.exists(dstPath, function(exists) {
          if ( exists ) {
            callback('Target already exist!');
          } else {
            _fs.copy(srcPath, dstPath, function(error, data) {
              if ( error ) {
                callback('Error copying: ' + error);
              } else {
                callback(false, true);
              }
            });
          }
        });
      } else {
        callback('Source does not exist!');
      }
    });
  };

  /**
   * Uploads a file
   *
   * @param   Object    args        API Call Arguments
   * @param   Function  callback    Callback function => fn(error, result)
   * @param   Object    request     Server request object
   * @param   Object    response    Server response object
   * @param   Object    config      Server configuration object
   *
   * @option  args      String    src         Uploaded file path
   * @option  args      String    name        Destination filename
   * @option  args      String    path        Destination path
   * @option  args      boolean   overwrite   Overwrite (default=false)
   *
   * @return  void
   *
   * @api     vfs.upload
   */
  module.exports.upload = function(args, request, callback, config) {
    var tmpPath = (args.path + '/' + args.name).replace('////', '///'); // FIXME
    var dstPath = getRealPath(tmpPath, config, request).root;
    var overwrite = args.overwrite === true;

    _fs.exists(args.src, function(exists) {
      if ( exists ) {
        _fs.exists(dstPath, function(exists) {
          if ( exists && !overwrite ) {
            callback('Target already exist!');
          } else {
            _fs.rename(args.src, dstPath, function(error, data) {
              if ( error ) {
                callback('Error renaming/moving: ' + error);
              } else {
                callback(false, '1');
              }
            });
          }
        });
      } else {
        callback('Source does not exist!');
      }
    });
  };

  /**
   * Move a file
   *
   * @param   Object    args        API Call Arguments
   * @param   Function  callback    Callback function => fn(error, result)
   * @param   Object    request     Server request object
   * @param   Object    response    Server response object
   * @param   Object    config      Server configuration object
   *
   * @option  args      String    src       Request source path
   * @option  args      String    dest      Request destination path
   * @option  args      Object    options   (Optional) Request options
   *
   * @return  void
   *
   * @api     vfs.move
   */
  module.exports.move = function(args, request, callback, config) {
    var src  = args.src;
    var dst  = args.dest;
    var opts = typeof args.options === 'undefined' ? {} : (args.options || {});

    var realSrc = getRealPath(src, config, request);
    var realDst = getRealPath(dst, config, request);
    var srcPath = realSrc.root; //_path.join(realSrc.root, src);
    var dstPath = realDst.root; //_path.join(realDst.root, dst);
    _fs.exists(srcPath, function(exists) {
      if ( exists ) {
        _fs.exists(dstPath, function(exists) {
          if ( exists ) {
            callback('Target already exist!');
          } else {
            _fs.rename(srcPath, dstPath, function(error, data) {
              if ( error ) {
                callback('Error renaming/moving: ' + error);
              } else {
                callback(false, true);
              }
            });
          }
        });
      } else {
        callback('Source does not exist!');
      }
    });
  };

  /**
   * Creates a directory
   *
   * @param   Object    args        API Call Arguments
   * @param   Function  callback    Callback function => fn(error, result)
   * @param   Object    request     Server request object
   * @param   Object    response    Server response object
   * @param   Object    config      Server configuration object
   *
   * @option  args      String    src       Request source path
   * @option  args      Object    options   (Optional) Request options
   *
   * @return  void
   *
   * @api     vfs.mkdir
   */
  module.exports.mkdir = function(args, request, callback, config) {
    var opts = typeof args.options === 'undefined' ? {} : (args.options || {});
    var realPath = getRealPath(args.path, config, request);
    var path = realPath.path;

    _fs.exists(realPath.root, function(exists) {
      if ( exists ) {
        callback('Target already exist!');
      } else {
        _fs.mkdir(realPath.root, function(error, data) {
          if ( error ) {
            callback('Error creating directory: ' + error);
          } else {
            callback(false, true);
          }
        });
      }
    });
  };

  /**
   * Check if file exists
   *
   * @param   Object    args        API Call Arguments
   * @param   Function  callback    Callback function => fn(error, result)
   * @param   Object    request     Server request object
   * @param   Object    response    Server response object
   * @param   Object    config      Server configuration object
   *
   * @option  args      String    src       Request source path
   * @option  args      Object    options   (Optional) Request options
   *
   * @return  void
   *
   * @api     vfs.exists
   */
  module.exports.exists = function(args, request, callback, config) {
    var opts = typeof args.options === 'undefined' ? {} : (args.options || {});
    var realPath = getRealPath(args.path, config, request);
    _fs.exists(realPath.root, function(exists) {
      callback(false, exists);
    });
  };

  /**
   * Get metadata about a file
   *
   * @param   Object    args        API Call Arguments
   * @param   Function  callback    Callback function => fn(error, result)
   * @param   Object    request     Server request object
   * @param   Object    response    Server response object
   * @param   Object    config      Server configuration object
   *
   * @option  args      String    src       Request source path
   * @option  args      Object    options   (Optional) Request options
   *
   * @return  void
   *
   * @api     vfs.fileinfo
   */
  module.exports.fileinfo = function(args, request, callback, config) {
    var opts = typeof args.options === 'undefined' ? {} : (args.options || {});
    var realPath = getRealPath(args.path, config, request);
    var path = realPath.path;
    _fs.exists(realPath.root, function(exists) {
      if ( !exists ) {
        callback('No such file or directory!');
      } else {
        _fs.stat(realPath.root, function(error, stat) {
          if ( error ) {
            callback('Error getting file information: ' + error);
          } else {

            var data = {
              path:         realPath.protocol + realPath.path,
              filename:     _path.basename(realPath.root),
              size:         stat.size,
              mime:         getMime(realPath.root, config),
              permissions:  readPermission(stat.mode),
              ctime:        stat.ctime || null,
              mtime:        stat.mtime || null
            };

            readExif(data, function(data) {
              callback(false, data);
            });

          }
        });
      }
    });
  };

  /**
   * Scans given directory
   *
   * @param   Object    args        API Call Arguments
   * @param   Function  callback    Callback function => fn(error, result)
   * @param   Object    request     Server request object
   * @param   Object    response    Server response object
   * @param   Object    config      Server configuration object
   *
   * @option  args      String    src       Request source path
   * @option  args      Object    options   (Optional) Request options
   *
   * @return  void
   *
   * @api     vfs.scandir
   */
  module.exports.scandir = function(args, request, callback, config) {
    var opts = typeof args.options === 'undefined' ? {} : (args.options || {});
    var realPath = getRealPath(args.path, config, request);
    var path = realPath.path;

    _fs.readdir(realPath.root, function(error, files) {
      if ( error ) {
        callback('Error reading directory: ' + error);
      } else {
        var result = [];
        var ofpath, fpath, ftype, fsize, fsstat, ctime, mtime;

        var tmp = realPath.path.replace(/^\/+?/, '');
        if ( tmp.length && tmp.split('/').length ) {
          tmp = tmp.split('/');
          tmp.pop();
          tmp = tmp.join('/');

          result.push({
            filename: '..',
            path:     realPath.protocol + _path.join('/', tmp),
            size:     0,
            mime:     '',
            type:     'dir',
            ctime:    null,
            mtime:    null
          });
        }

        for ( var i = 0; i < files.length; i++ ) {
          ofpath = pathJoin(path, files[i]);
          fpath  = _path.join(realPath.root, files[i]);

          try {
            fsstat = _fs.statSync(fpath);
            ftype  = fsstat.isFile() ? 'file' : 'dir';
            fsize  = fsstat.size;
            mtime  = fsstat.mtime;
            ctime  = fsstat.ctime;
          } catch ( e ) {
            ftype = 'file';
            fsize = 0;
            ctime = null;
            mtime = null;
          }

          result.push({
            filename: files[i],
            path:     realPath.protocol + ofpath,
            size:     fsize,
            mime:     ftype === 'file' ? getMime(files[i], config) : '',
            type:     ftype,
            ctime:    ctime,
            mtime:    mtime
          });
        }

        callback(false, result);
      }
    });
  };

})(
  require('path'),
  require('node-fs-extra')
);
