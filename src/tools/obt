#!/usr/bin/env node

/**
 * OS.js Build Tool
 *
 * OS.js - JavaScript Operating System
 *
 * Copyright (c) 2011-2014, Anders Evenrud <andersevenrud@gmail.com>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer. 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author  Anders Evenrud <andersevenrud@gmail.com>
 * @licence Simplified BSD License
 */

String.prototype.replaceAll = function(stringToFind,stringToReplace){
  var temp = this;
  var index = temp.indexOf(stringToFind);
  while(index != -1){
    temp = temp.replace(stringToFind,stringToReplace);
    index = temp.indexOf(stringToFind);
  }
  return temp;
};

(function(argv, _fs, _path, _exec) {
  var ROOT    = _path.join(__dirname, '../../');

  var buildFile = _path.join(ROOT, "src", "build.json");
  if ( _fs.existsSync(_path.join(ROOT, "src", "build.custom.json")) ) {
    buildFile = _path.join(ROOT, "src", "build.custom.json");
    console.log('Using', buildFile);
  }

  var LESSC   = _path.join(ROOT, 'node_modules/less/bin/lessc');
  var BUILD   = JSON.parse(_fs.readFileSync(buildFile));
  var REPOS   = JSON.parse(_fs.readFileSync(_path.join(ROOT, "src", "packages", "repositories.json")));
  var MIMES   = JSON.parse(_fs.readFileSync(_path.join(ROOT, "src", "mime.json")));
  var HANDLER = '';
  var YUI     = _path.join(ROOT, 'vendor', 'yuicompressor-2.4.8.jar');
  var CC      = _path.join(ROOT, 'vendor', 'closurecompiler.jar');

  (function() {
    var build      = JSON.stringify(BUILD);
    var handler    = BUILD.handler    || "demo";
    var connection = BUILD.connection || "http";

    build = build.replaceAll("%ROOT%",       ROOT);
    build = build.replaceAll("%HANDLER%",    handler);
    build = build.replaceAll("%CONNECTION%", connection);

    BUILD   = JSON.parse(build);
    HANDLER = BUILD.handler || 'demo';
  })();

  /**
   * Simple Async Queue
   */
  function AQ() {
    this.q = [];
  }
  AQ.prototype.add = function(cb) {
    this.q.push(cb);
  };
  AQ.prototype.run = function(cb) {
    var self = this;
    var f = false;
    cb = cb || function() {};

    function _next() {
      if ( f ) { return; }
      if ( self.q.length ) {
        var i = self.q.shift();
        i(function() {
          _next();
        });
      } else {
        f = true;
      }

      if ( f ) {
        cb();
      }
    }

    _next();
  };

  /**
   * Prints help screen
   */
  function printHelp() {
    console.log('Available actions:');
    for ( var i in actions ) {
      if ( actions.hasOwnProperty(i) ) {
        console.log(' ', i, '-', actions[i].description);
      }
    }
  }

  /**
   * Executes a command
   */
  function exec(cmd, cb) {
    cb = cb || function() {};
    if ( typeof cmd === 'array' || (cmd instanceof Array) ) {
      cmd = cmd.join(' ');
    }

    console.info(cmd.toString().replaceAll(ROOT, ''));

    _exec(cmd, function (error, stdout, stderr) {
      cb(error, stdout, stderr);
    });
  }

  /**
   * Gets file extension
   */
  function getExtension(filename) {
    var ext = _path.extname(filename||'').split('.');
    return ext[ext.length - 1];
  }

  /**
   * Returns a list of files matching extension
   */
  function getFilesByExtension(dir, type) {
    var list  = [];
    var files = _fs.readdirSync(dir);
    for ( var i = 0; i < files.length; i++ ) {
      if ( getExtension(files[i]) == type ) {
        list.push(files[i]);
      }
    }
    return list;
  }

  /**
   * Returns a list of directories in given path
   */
  function getDirs(dir) {
    var list = [];

    var files = _fs.readdirSync(dir);
    for ( var i = 0; i < files.length; i++ ) {
      if ( files[i].match(/^\./) ) {
        continue;
      }

      if ( _fs.lstatSync(_path.join(dir, files[i])).isDirectory() ) {
        list.push(files[i]);
      }
    }

    return list;
  }

  /**
   * Returns a list of packages of type extension
   */
  function getCoreExtensions() {
    var list = [];
    REPOS.forEach(function(r) {
      var dir = _path.join(ROOT, 'src', 'packages', r);
      getDirs(dir).forEach(function(d) {
        var path = _path.join(dir, d);
        var meta = _path.join(path, 'package.json');
        try {
          var data = JSON.parse(_fs.readFileSync(meta));
          if ( !data || data.enabled === false ) {
            return;
          }
          if ( data && data.type === 'extension' ) {
            data._root = path;
            data._dist = _path.join('packages', r, d);
            list.push(data);
          }
        } catch ( e ) {
          console.warn('\033[1;33mWARNING:\033[0m Failed to read metadata of %s:%s: %s', r, d, e);
        }
      });
    });
    return list;
  }

  /////////////////////////////////////////////////////////////////////////////
  // ACTIONS
  /////////////////////////////////////////////////////////////////////////////

  /**
   * Action: Build Core
   */
  function buildCore() {
    function _concat(list, type) {
      var data = [];
      var iter, src;
      for ( var i = 0; i < list.length; i++ ) {
        iter = list[i];
        console.log(iter);

        try {
          src = _fs.readFileSync(iter);
        } catch ( e ) {
          console.warn('\033[1;33mWARNING:\033[0m Failed to read', iter, e);
          continue;
        }

        if ( src !== null ) {
          src = src.toString().replace(/\/\*\![\s\S]*?\*\//, "");
          if ( type === 'css' ) {
            src = src.toString().replace('@charset "UTF-8";', "");
          } else {
            src = src.toString().replace(/console\.(log|debug|info|group|groupStart|groupEnd|count)\((.*)\);/g, "");
          }

          data.push(src);
        }
      }

      return data.join("\n");
    }

    var extensions = getCoreExtensions();

    console.log("\033[1;34mCompiling JavaScript\033[0m");
    var header_js = _fs.readFileSync(_path.join(ROOT, 'src', 'tools', 'templates', 'dist-header.js'));
    var list_js = BUILD.javascript.files;
    extensions.forEach(function(iter) {
      if ( iter && iter.sources ) {
        iter.sources.forEach(function(iiter) {
          if ( iiter.type === 'javascript' ) {
            list_js.push(_path.join(iiter._root, iiter.src));
          }
        });
      }
    });

    var js = header_js + _concat(list_js, 'js');
    _fs.writeFileSync(_path.join(ROOT, BUILD.javascript.output), js);

    console.log("\033[1;34mCompiling CSS\033[0m");
    var header_css = _fs.readFileSync(_path.join(ROOT, 'src', 'tools', 'templates', 'dist-header.css'));
    var list_css = BUILD.stylesheets.files;
    extensions.forEach(function(iter) {
      if ( iter && iter.sources ) {
        iter.sources.forEach(function(iiter) {
          if ( iiter.type === 'stylesheet' ) {
            list_css.push(_path.join(iiter._root, iiter.src));
          }
        });
      }
    });

    var css = header_css + _concat(list_css, 'css');
    _fs.writeFileSync(_path.join(ROOT, BUILD.stylesheets.output), css);
  }

  /**
   * Action: Build Themes
   */
  function buildThemes() {
    var dir   = _path.join(ROOT, 'src', 'themes');
    var files = getFilesByExtension(dir, 'less');

    var q = new AQ();

    function aq(iter, name) {
      q.add(function(cb) {
        console.log("\033[1;32mBuilding theme \033[0;33m%s\033[0m", name);
        cb();
      });

      q.add(function(cb) {
        var src = _path.join(dir, iter);
        var dest = _path.join(ROOT, 'dist', 'themes', name + '.css');

        exec([LESSC, src, dest], function() {
          cb();
        });
      });

      q.add(function(cb) {
        var src = _path.join(dir, name);
        var dest = _path.join(ROOT, 'dist', 'themes', name);
        exec(['cp', '-Rf', src, dest], function() {
          cb();
        });
      });
    }

    var name;
    for ( var i = 0; i < files.length; i++ ) {
      name = _path.basename(files[i]).replace(/\.[A-z]+$/, '');
      if ( !name.match(/^\.|\_/) ) {
        aq(files[i], name);
      }
    }

    q.run(function() {
    });
  }

  /**
   * Action: Build Packages
   */
  function buildPackages() {

    var q = new AQ();

    function build_package(repo, app) {

      var src = _path.join(ROOT, 'src', 'packages', repo, app);
      var dst = _path.join(ROOT, 'dist', 'packages', repo);
      var dir = _path.join(ROOT, 'dist', 'packages', repo, app);

      q.add(function(cb) {
        console.log("\033[1;32mBuilding Package \033[0;33m%s/\033[1;33m%s\033[0m", repo, app);
        cb();
      });
      q.add(function(cb) {
        exec(['mkdir', '-p', dir], cb);
      });
      q.add(function(cb) {
        exec(['cp', '-rf', src, dst], cb);
      });
      q.add(function(cb) {
        var manpath = _path.join(dir, "package.json");
        var man     = JSON.parse(_fs.readFileSync(manpath));
        var mkey    = null;

        if ( man.type === 'extension' ) {
          cb();
          return;
        }

        for ( var x in man ) {
          if ( man.hasOwnProperty(x) ) {
            mkey = x;
            break;
          }
        }

        if ( !mkey || !man[mkey] ) {
          return;
        }

        if ( man[mkey].preload && man[mkey].preload.length ) {
          var combined_js = [];
          var combined_css = [];
          var remove = [];
          var p, r, s;
          var n = [];

          for ( var i = 0; i < man[mkey].preload.length; i++ ) {
            s = man[mkey].preload[i];
            p = _path.join(dir, s.src);

            if ( ((typeof s.combine !== "undefined" && (s.combine === false || s.combine === "false"))) || s.src.match(/^combined\.(css|js)$/) ) {
              n.push(s);
              continue;
            }

            if ( s.type == "javascript" ) {
              combined_js.push(_fs.readFileSync(p));
              remove.push(p);
            } else if ( s.type == "stylesheet" ) {
              combined_css.push(_fs.readFileSync(p));
              remove.push(p);
            } else {
              n.push(s);
            }
          }

          for ( var r = 0; r < remove.length; r++ ) {
            _fs.unlinkSync(remove[r]);
          }

          if ( combined_css.length ) {
            n.push({type: "stylesheet", src: "combined.css"});
          }
          if ( combined_js.length ) {
            n.push({type: "javascript", src: "combined.js"});
          }

          man[mkey].preload = n;

          _fs.writeFileSync(_path.join(dir, "combined.js"), combined_js.join("\n"));
          _fs.writeFileSync(_path.join(dir, "combined.css"), combined_css.join("\n"));
          _fs.writeFileSync(manpath, JSON.stringify(man, null, 2));
        }

        cb();
      });
    }

    q.add(function(cb) {
      exec(['mkdir', _path.join(ROOT, 'dist', 'packages')], cb);
    });

    var dirs;
    for ( var i = 0; i < REPOS.length; i++ ) {
      try {
        dirs = getDirs(_path.join(ROOT, 'src', 'packages', REPOS[i]));
        for ( var d = 0; d < dirs.length; d++ ) {
          build_package(REPOS[i], dirs[d]);
        }
      } catch ( e ) {
        console.warn('\033[1;33mWARNING:\033[0m Failed to list directory', REPOS[i], e);
      }
    }

    q.run(function() {
    });
  }

  /**
   * Action: Build Config
   */
  function buildConfig() {
    // PHP
    var settings = BUILD.settings.backend;
    var out_php  = _path.join(ROOT, 'src', 'server-php', 'settings.php');
    var cfg_php  = [];
    for ( var i in settings ) {
      if ( settings.hasOwnProperty(i) ) {
        cfg_php.push("define('" + i.toUpperCase() + "', '" + settings[i] + "');");
      }
    }
    cfg_php = "<?php\n" + cfg_php.join("\n") + "\n?>";
    _fs.writeFileSync(out_php, cfg_php);

    // Node
    var out_node = _path.join(ROOT, 'src', 'server-node', 'settings.json');
    var cfg_node = settings;
    _fs.writeFileSync(out_node, JSON.stringify(cfg_node));

    // JS
    var cfg_js = "(function() {\n  window.OSjs = window.OSjs   || {};\n  OSjs.Settings = OSjs.Settings || {};\n  OSjs.Settings.DefaultConfig = function() {\n    return %CONFIG%;\n  };\n})();\n";
    var out_js = _path.join(ROOT, 'dist', 'settings.js');
    settings = BUILD.settings.frontend;
    settings.MIME = MIMES.descriptions;
    settings.Core.Repositories = REPOS;
    _fs.writeFileSync(out_js, cfg_js.replace("%CONFIG%", JSON.stringify(settings, null, 2)));
  }

  /**
   * Action: Compress
   */
  function doCompress() {
    var q = new AQ();

    function compress_css(src, dest, cb) {
      dest = dest || src;
      exec(['java', '-jar', YUI, '--type css', '--charset utf-8', src, '-o', dest], cb);
    }

    function compress_js(src, dest, cb) {
      dest = dest || src;
      exec(['java', '-jar', CC, '--charset utf-8', '--js', src, '--js_output_file', dest], cb);
    }

    function compress_package(repo, app) {
      q.add(function(cb) {
        console.log("\033[1;34mCompressing Package", "'"+app+"'", "in", "'"+repo+"'", "\033[0m");
        cb();
      });

      q.add(function(cb) {
        var src = _path.join(ROOT, 'dist', 'packages', repo, app, 'combined.js');
        var dst = _path.join(ROOT, 'dist', 'packages', repo, app, 'combined.tmp.js');
        compress_js(src, dst, cb);
      });
        q.add(function(cb) {
          var src = _path.join(ROOT, 'dist', 'packages', repo, app, 'combined.tmp.js');
          var dst = _path.join(ROOT, 'dist', 'packages', repo, app, 'combined.js');
          exec(['mv', src, dst], cb);
        });

      q.add(function(cb) {
        var src = _path.join(ROOT, 'dist', 'packages', repo, app, 'combined.css');
        var dst = _path.join(ROOT, 'dist', 'packages', repo, app, 'combined.tmp.css');
        compress_css(src, dst, cb);
      });
        q.add(function(cb) {
          var src = _path.join(ROOT, 'dist', 'packages', repo, app, 'combined.tmp.css');
          var dst = _path.join(ROOT, 'dist', 'packages', repo, app, 'combined.css');
          exec(['mv', src, dst], cb);
        });
    }


    q.add(function(cb) {
      console.log("\033[1;34mCompressing Core:\033[0m");
      cb();
    });

    var out_css = _path.join(ROOT, BUILD.stylesheets.output);
    q.add(function(cb) {
      var src = out_css;
      var dst = out_css.replace(/\.css$/, '.tmp.css');
      compress_css(src, dst, cb);
    });
      q.add(function(cb) {
        var src = out_css.replace(/\.css$/, '.tmp.css');
        var dst = out_css;
        exec(['mv', src, dst], cb);
      });

    var out_js = _path.join(ROOT, BUILD.javascript.output);
    q.add(function(cb) {
      var src = out_js;
      var dst = out_js.replace(/\.js$/, '.tmp.js');
      compress_js(src, dst, cb);
    });
      q.add(function(cb) {
        var src = out_js.replace(/\.js$/, '.tmp.js');
        var dst = out_js;
        exec(['mv', src, dst], cb);
      });

    var dirs;
    for ( var i = 0; i < REPOS.length; i++ ) {
      dirs = getDirs(_path.join(ROOT, 'src', 'packages', REPOS[i]));
      for ( var d = 0; d < dirs.length; d++ ) {
        compress_package(REPOS[i], dirs[d]);
      }
    }

    q.run(function() {
    });
  }

  /**
   * Action: Create Package Manifest
   */
  function createPackageManifest() {
    var packages = {};

    function get_metadata(path, file, repo) {
      var json_path = _path.join(path, "package.json");
      try {
        var json_data = JSON.parse(_fs.readFileSync(json_path));
        var manifest = null;
        var package_name;
        for ( var name in json_data ) {
          if ( json_data.hasOwnProperty(name) ) {
            package_name = name;
            manifest     = json_data[name];
            break;
          }
        }

        if ( !manifest ) {
          console.log("- \033[0;31mSkipped '%s' (no manifest)\033[0m", file);
          return null;
        }

        if ( manifest['enabled'] === false || manifest['enabled'] === 'false' ) {
          console.log("- \033[0;31mSkipped '%s' (disabled)\033[0m", package_name);
          return null;
        }

        if ( manifest['type'] === 'extension' || typeof manifest === 'string' ) {
          return null;
        }

        if ( typeof manifest.preload !== 'undefined' && (manifest.preload instanceof Array)) {
          for ( var p = 0; p < manifest.preload.length; p++ ) {
            if ( !manifest.preload[p].src.match(/^(ftp|https?\:)?\/\//) ) {
              manifest.preload[p].src = (["/packages", repo, file, manifest.preload[p].src]).join("/");
            }
          }
        }

        manifest.path = repo + "/" + file;
        manifest.iter = package_name;

        console.log("- Added package \033[1;37m%s\033[0m", package_name);

        return manifest;
      } catch ( e ) {
        console.log("- \033[0;31mSkipped '%s' (parse error)\033[0m", file);
        console.error(e);
      }
      return null;
    }

    function scan_packages(pkgdir, repo) {
      var files = _fs.readdirSync(_path.join(pkgdir, repo));

      var file, path, metadata;
      for ( var f = 0; f < files.length; f++ ) {
        file = files[f];
        if ( !file.length || file.match(/^\./) ) continue;

        path = _path.join(pkgdir, repo, file);
        if ( _fs.statSync(path).isDirectory() ) {
          metadata = get_metadata(path, file, repo);
          if ( metadata !== null ) {
            packages[metadata.iter] = metadata;
          }
        }
      }
    }

    function create_dist_manifest(dist) {

      console.log("\033[1;32mCreating package manifest for '%s'\033[0m", dist);

      var src;
      for ( var i = 0; i < REPOS.length; i++ ) {
        repo = REPOS[i];
        console.log("\033[1;34mScanning repository '%s':\033[0m", repo);
        src = _path.join(ROOT, dist, 'packages');
        try {
          scan_packages(src, repo);
        } catch ( e ) {
          console.warn('\033[1;33mWARNING:\033[0m Failed to list directory', repo, e);
        }
      }

      var dest = _path.join(ROOT, dist, 'packages.json');
      _fs.writeFileSync(dest, JSON.stringify(packages, null, 2));
    }

    create_dist_manifest("dist");
    create_dist_manifest("dist-dev");
  }

  /**
   * Action: Create Theme Manifest
   */
  function createThemeManifest() {

    function get_metadata(path, file) {
      var json_path = _path.join(path, "metadata.json");
      if ( _fs.existsSync(json_path) ) {
        try {
          var manifest = JSON.parse(_fs.readFileSync(json_path));

          console.log("- Added theme \033[1;37m%s\033[0m", file);

          return manifest;
        } catch ( e ) {
          console.log("- \033[0;31mSkipped '%s' (parse error)\033[0m", file);
          console.error(e);
        }
      }
      return null;
    }

    function scan_themes(pkgdir) {
      var files = _fs.readdirSync(pkgdir);
      var file, path, metadata;
      var result = [];
      for ( var f = 0; f < files.length; f++ ) {
        file = files[f];
        if ( !file.length || file.match(/^\./) ) continue;

        path = _path.join(pkgdir, file);
        if ( _fs.statSync(path).isDirectory() ) {
          metadata = get_metadata(path, file);
          if ( metadata !== null ) {
            result.push(metadata);
          }
        }
      }
      return result;
    }

    function create_dist_manifest(dist) {
      console.log("\033[1;32mCreating theme manifest for '%s'\033[0m", dist);

      var src = _path.join(ROOT, dist, 'themes');
      var packages = scan_themes(src);
      var dest = _path.join(ROOT, dist, 'themes.json');
      _fs.writeFileSync(dest, JSON.stringify(packages, null, 2));
    }

    create_dist_manifest("dist");
    create_dist_manifest("dist-dev");
  }

  /**
   * Generate new Apache Htaccess files
   */
  function generateApacheHtaccess(a) {
    var mimes = [];
    var maps = MIMES.mapping;
    for ( var i in maps ) {
      if ( maps.hasOwnProperty(i) ) {
        if ( !i.match(/^\./) ) { continue; }
        mimes.push('  AddType ' + maps[i] + ' ' + i);
      }
    }
    mimes = mimes.join('\n');

    function generate_htaccess(t, d) {
      console.log("\033[1;32mCreating apache htaccess for '%s'\033[0m", d);

      var src = _path.join(ROOT, 'src', 'tools', 'templates', t);
      var dst = _path.join(ROOT, d, '.htaccess');
      var tpl = _fs.readFileSync(src).toString();
      tpl = tpl.replace(/%MIMES%/, mimes);
      _fs.writeFileSync(dst, tpl);
    }

    if ( a === 'all' ) {
      generate_htaccess('apache-prod-htaccess.conf', 'dist');
      generate_htaccess('apache-dev-htaccess.conf', 'dist-dev');
    } else {
      generate_htaccess('apache-prod-htaccess.conf', (a || 'dist'));
    }
  }

  /**
   * Generate new Lighttpd config
   */
  function generateLighttpdConfig(a) {
    var dist = a || 'dist';
    var mimes = [];
    var maps = MIMES.mapping;
    for ( var i in maps ) {
      if ( maps.hasOwnProperty(i) ) {
        if ( !i.match(/^\./) ) { continue; }
        mimes.push('  ' + i + ' => ' + maps[i]);
      }
    }
    mimes = mimes.join(',\n');

    var src = _path.join(ROOT, 'src', 'tools', 'templates', 'lighttpd.conf');
    var tpl = _fs.readFileSync(src).toString();
    tpl = tpl.replace(/%DISTDIR%/, _path.join(ROOT, dist));
    tpl = tpl.replace(/%MIMES%/, mimes);

    console.log('\n' + tpl + '\n');
  }

  /**
   * Generate new Apache vhost
   */
  function generateApacheVhost(a) {
    var dist = a || 'dist';
    var src = _path.join(ROOT, 'src', 'tools', 'templates', 'apache-vhost.conf');
    var tpl = _fs.readFileSync(src).toString();
    tpl = tpl.replace(/%DISTDIR%/, _path.join(ROOT, dist));

    console.log('\n' + tpl + '\n');
  }

  /**
   * Create new package
   */
  function createPackage(name, repo) {
    if ( !name ) {
      throw "Expects 'name'";
    }
    repo = repo || 'default';
    var q = new AQ();

    var src = _path.join(ROOT, 'src', 'tools', 'templates', 'package');
    var dst = _path.join(ROOT, 'src', 'packages', repo, name);

    if ( !_fs.existsSync(src) ) {
      throw 'Template not found!';
    }

    if ( _fs.existsSync(dst) ) {
      throw 'Package already exist!';
    }

    function rep(file) {
      var c = _fs.readFileSync(file).toString();
      c = c.replaceAll('EXAMPLE', name);
      _fs.writeFileSync(file, c);
    }

    q.add(function(cb) {
      exec(['cp', '-r', src, dst], function() {
        cb();
      });
    });

    q.add(function(cb) {
      rep(_path.join(dst, 'main.js'));
      rep(_path.join(dst, 'main.css'));
      rep(_path.join(dst, 'package.json'));

      cb();
    });

    q.add(function(cb) {
      console.log("\033[1;32mCreated Package \033[0;33m%s/\033[1;33m%s\033[0m", repo, name);
      console.log(dst);
      cb();
    });

    q.run();
  }

  /**
   * Manage repository
   */
  function manageRepository(action, repo, arg) {
    if ( !action ) {
      throw 'Expects action';
    }
    var q = new AQ();

    function find(name) {
      for ( var i = 0; i < REPOS.length; i++ ) {
        if ( REPOS[i] === name ) {
          return i;
        }
      }
      return false;
    }

    var found = find(repo);

    switch ( action ) {
      case 'add' :
        if ( !repo ) {
          throw 'Expects \'repository name\'';
        }
        if ( found !== false ) {
          throw 'Repository already added';
        }

        q.add(function(cb) {
          REPOS.push(repo);

          cb();
        });
      break;

      case 'remove' :
        if ( !repo ) {
          throw 'Expects \'repository name\'';
        }
        if ( found === false ) {
          throw 'Repository not found';
        }

        q.add(function(cb) {
          REPOS.splice(found, 1);
          cb();
        });
      break;

      case 'clone' :
        if ( !repo || !arg ) {
          throw 'Expects \'repository name\' and \'repository url\'';
        }
        if ( found !== false ) {
          throw 'Repository already cloned';
        }

        q.add(function(cb) {
          var src = arg;
          var dst = _path.join(ROOT, 'src', 'packages', repo);
          exec(['git', 'clone', src, dst], cb);
        });

        q.add(function(cb) {
          REPOS.push(repo);
          cb();
        });
      break;

      case 'delete' :
        if ( !repo ) {
          throw 'Expects \'repository name\'';
        }

        var target = _path.join(ROOT, 'src', 'packages', repo);
        q.add(function(cb) {
          exec(['rm', '-rf', target], cb);
        });

        q.add(function(cb) {
          if ( found !== false ) {
            REPOS.splice(found, 1);
          }

          cb();
        });
      break;

      default :
        throw 'Invalid action: ' + action;
      break;
    }

    q.add(function(cb) {
      _fs.writeFileSync(_path.join(ROOT, "src", "packages", "repositories.json"), JSON.stringify(REPOS));
      cb();
    });

    q.run();
  }

  /**
   * Generate index.html
   */
  function generateIndex() {
    var tpl = _fs.readFileSync(_path.join(ROOT, 'src', 'tools', 'templates', 'index.html')).toString();
    var extensions = getCoreExtensions();

    var script_list = [];
    var style_list = [];
    BUILD.javascript.files.forEach(function(i) {
      script_list.push(i.replace('src/javascript', 'js'));
    });
    BUILD.stylesheets.files.forEach(function(i) {
      style_list.push(i.replace('src/stylesheets', 'css'));
    });
    extensions.forEach(function(i) {
      if ( i.sources ) {
        i.sources.forEach(function(iter) {
          if ( iter.type === 'stylesheet' ) {
            style_list.push(_path.join(i._dist, iter.src));
          } else {
            script_list.push(_path.join(i._dist, iter.src));
          }
        });
      }
    });

    var styles = [];
    var scripts = [];
    script_list.forEach(function(i) {
      scripts.push('    <script type="text/javascript" charset="utf-8" src="/' + i + '"></script>');
    });
    style_list.forEach(function(i) {
      styles.push('    <link type="text/css" rel="stylesheet" href="/' + i + '" />');
    });

    tpl = tpl.replaceAll("%STYLES%", styles.join('\n'));
    tpl = tpl.replaceAll("%SCRIPTS%", scripts.join('\n'));
    _fs.writeFileSync(_path.join(ROOT, 'dist-dev', 'index.html'), tpl);
  }

  /////////////////////////////////////////////////////////////////////////////
  // ACTION LIST
  /////////////////////////////////////////////////////////////////////////////

  var actions = {
    'core': {
      description: 'Builds core files',
      cb: buildCore
    },

    'themes': {
      description: 'Builds theme files',
      cb: buildThemes
    },

    'packages': {
      description: 'Builds package files',
      cb: buildPackages
    },

    'config': {
      description: 'Builds config files',
      cb: buildConfig
    },

    'compress': {
      description: 'Compresses dist (overwrites \'dist\' files)',
      cb: doCompress
    },

    'package-manifest' : {
      description: 'Creates package manifest',
      cb: createPackageManifest
    },

    'theme-manifest' : {
      description: 'Creates theme manifest',
      cb: createThemeManifest
    },

    'apache-htaccess' : {
      description: 'Generates apache htaccess files. Optional argument is <dist-name> (default is both \'all\')',
      cb: generateApacheHtaccess
    },

    'apache-vhost' : {
      description: 'Generates a apache vhost config. Optional argument is <dist-name> (defaults to \'dist\')',
      cb: generateApacheVhost
    },

    'lighttpd-config' : {
      description: 'Generates a lighttpd config. Optional argument is <dist-name> (defaults to \'dist\')',
      cb: generateLighttpdConfig
    },

    'dist-dev-index' : {
      description: 'Generates a index.html file for dist-dev',
      cb: generateIndex
    },

    'create-package' : {
      description: 'Generate a new package template (new application). Arguments: <name>[, <repository>]',
      cb: createPackage
    },

    'repository' : {
      description: 'Manage repositories: Arguments: <action> <repo-name>[, <argument>, ...]',
      help: 'Actions: add <name>, remove <name>, clone <name> <url>, delete <name>',
      cb: manageRepository
    }
  };

  /////////////////////////////////////////////////////////////////////////////
  // MAIN
  /////////////////////////////////////////////////////////////////////////////

  if ( argv.length < 2 ) {
    return;
  }

  var a = argv[2] || "help";
  var args = [];
  for ( var i = 3; i < argv.length; i++ ) {
    args.push(argv[i]);
  }

  if ( a === "help" ) {
    printHelp();
    return;
  }

  if ( !actions[a] ) {
    console.error("Invalid action", a);
    return;
  }

  actions[a].cb.apply(actions, args);

})(process.argv, require('fs'), require('path'), require('child_process').exec);
